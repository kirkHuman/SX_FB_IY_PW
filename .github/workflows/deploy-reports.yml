name: Deploy Test Reports to GitHub Pages
on:
  workflow_run:
    workflows: ["Fabletics Tests", "SavageX Tests", "Yitty Tests"]
    types:
      - completed

jobs:
  collect-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download artifacts from triggering workflow
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ${{ github.event.workflow_run.name }}
          run_id: ${{ github.event.workflow_run.id }}
          workflow_conclusion: completed
          path: artifacts
          search_artifacts: true
          check_artifacts: false
          if_no_artifact_found: warn
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Install Allure CLI
        run: |
          curl -o allure-commandline.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.25.0/allure-commandline-2.25.0.tgz
          tar -zxvf allure-commandline.tgz
          sudo mv allure-2.25.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version
      
      - name: Debug - List downloaded artifacts
        run: |
          echo "Listing all downloaded artifacts:"
          ls -la artifacts/ || echo "No artifacts directory found"
          if [ -d "artifacts" ]; then
            echo "Artifact directories found:"
            find artifacts -type d -name "test-results-*" | sort
            echo "Checking for playwright-report in each artifact:"
            for dir in artifacts/test-results-*; do
              if [ -d "$dir" ]; then
                echo "Contents of $dir:"
                ls -la "$dir"
                if [ -d "$dir/allure-results" ]; then
                  echo "Allure results found in $dir:"
                  ls -la "$dir/allure-results"
                fi
              fi
            done
          fi
      
      - name: Prepare reports directory
        run: |
          mkdir -p reports
          # Create index page
          echo "<html><head><title>Test Reports</title><style>body{font-family:sans-serif;max-width:1200px;margin:0 auto;padding:20px}h1,h2{color:#333}table{width:100%;border-collapse:collapse;margin-top:20px}th,td{padding:10px;text-align:left;border-bottom:1px solid #ddd}th{background-color:#f2f2f2}tr:hover{background-color:#f5f5f5}a{color:#0366d6;text-decoration:none}a:hover{text-decoration:underline}.brand-section{margin:30px 0;padding:20px;border-radius:5px;background-color:#f9f9f9}</style></head><body>" > reports/index.html
          echo "<h1>Test Reports</h1>" >> reports/index.html
          echo "<p>Last updated: $(date)</p>" >> reports/index.html
          echo "<p>Triggered by: ${{ github.event.workflow_run.name }} (Run #${{ github.event.workflow_run.run_number }})</p>" >> reports/index.html
          
          # Check if artifacts were found
          if [ -z "$(ls -A artifacts 2>/dev/null)" ]; then
            echo "<div style='padding:20px;border-radius:5px;background-color:#fff3cd;color:#856404;margin:20px 0;'>No artifacts found from the triggering workflow. Either the tests didn't produce reports or they weren't uploaded correctly.</div>" >> reports/index.html
          fi
          
          # Process each brand
          for BRAND in fabletics savagex yitty; do
            # Create brand section
            echo "<div class='brand-section'>" >> reports/index.html
            echo "<h2>${BRAND^} Brand</h2>" >> reports/index.html
            echo "<table><tr><th>Domain</th><th>Environment</th><th>Status</th><th>Playwright Report</th><th>Allure Report</th></tr>" >> reports/index.html
            
            # Create brand directory
            mkdir -p reports/$BRAND
            
            # Check if any artifacts exist for this brand
            FOUND_ARTIFACTS=false
            
            # Process artifacts for this brand
            for ARTIFACT_DIR in artifacts/test-results-${BRAND}-*; do
              if [ -d "$ARTIFACT_DIR" ]; then
                FOUND_ARTIFACTS=true
                # Extract domain and environment from artifact name
                ARTIFACT_NAME=$(basename "$ARTIFACT_DIR")
                DOMAIN=$(echo $ARTIFACT_NAME | cut -d'-' -f4)
                ENV=$(echo $ARTIFACT_NAME | cut -d'-' -f5)
                
                # Create report directories
                PW_REPORT_PATH="$BRAND/$DOMAIN-$ENV/playwright"
                ALLURE_REPORT_PATH="$BRAND/$DOMAIN-$ENV/allure"
                mkdir -p "reports/$PW_REPORT_PATH"
                mkdir -p "reports/$ALLURE_REPORT_PATH"
                
                # Copy Playwright report contents
                if [ -d "$ARTIFACT_DIR/playwright-report" ]; then
                  cp -r "$ARTIFACT_DIR/playwright-report"/* "reports/$PW_REPORT_PATH/"
                  PW_STATUS="✅"
                else
                  echo "<p>No Playwright report available</p>" > "reports/$PW_REPORT_PATH/index.html"
                  PW_STATUS="❌"
                fi
                
                # Generate and copy Allure report
                if [ -d "$ARTIFACT_DIR/allure-results" ]; then
                  # Create a temporary directory for this specific Allure report
                  mkdir -p "temp-allure-$BRAND-$DOMAIN-$ENV"
                  cp -r "$ARTIFACT_DIR/allure-results"/* "temp-allure-$BRAND-$DOMAIN-$ENV/"
                  
                  # Generate the Allure report for this specific test set
                  allure generate "temp-allure-$BRAND-$DOMAIN-$ENV" -o "reports/$ALLURE_REPORT_PATH" --clean
                  
                  # Clean up temp directory
                  rm -rf "temp-allure-$BRAND-$DOMAIN-$ENV"
                  ALLURE_STATUS="✅"
                else
                  echo "<p>No Allure report available</p>" > "reports/$ALLURE_REPORT_PATH/index.html"
                  ALLURE_STATUS="❌"
                fi
                
                # Add entry to index
                echo "<tr><td>${DOMAIN}</td><td>${ENV}</td><td>${PW_STATUS} ${ALLURE_STATUS}</td><td><a href='${PW_REPORT_PATH}/'>View Playwright</a></td><td><a href='${ALLURE_REPORT_PATH}/'>View Allure</a></td></tr>" >> reports/index.html
              fi
            done
            
            # If no artifacts found for this brand, add a message
            if [ "$FOUND_ARTIFACTS" = false ]; then
              echo "<tr><td colspan='5'>No test reports available for ${BRAND^} brand in this workflow run</td></tr>" >> reports/index.html
            fi
            
            echo "</table></div>" >> reports/index.html
          done
          
          echo "</body></html>" >> reports/index.html
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 